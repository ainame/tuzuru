name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
  PRODUCT_NAME: tuzuru

jobs:
  build-and-release:
    name: Build Universal Binaries and Release
    runs-on: macos-15
    # Only run on version bump commits when triggered by push to main
    # IMPORTANT: This workflow depends on commit messages containing '[Version Bump]'
    # which is automatically created by scripts/release.sh when creating version bump PRs
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[Version Bump]')

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Auto-create tag for version bumps
      id: auto_tag
      run: scripts/auto-tag.sh

    - name: Setup Xcode
      run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

    - name: Get version
      id: version
      run: |
        VERSION="${{ steps.auto_tag.outputs.created_tag }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Install Swiftly for Linux cross-compilation
      run: |
        # Install Swiftly using the official macOS method to user directory
        curl -O https://download.swift.org/swiftly/darwin/swiftly.pkg
        installer -pkg swiftly.pkg -target CurrentUserHomeDirectory
        rm swiftly.pkg

        # Add to PATH for current session
        echo "$HOME/.swiftly/bin" >> $GITHUB_PATH
        export PATH="$HOME/.swiftly/bin:$PATH"

        # Initialize swiftly
        swiftly init --assume-yes
        hash -r

        # Install Swift 6.1.2 for cross-compilation
        swiftly install 6.1.2
        swiftly use 6.1.2

        # Install Static Linux SDK
        swift sdk install https://download.swift.org/swift-6.1.2-release/static-sdk/swift-6.1.2-RELEASE/swift-6.1.2-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz --checksum df0b40b9b582598e7e3d70c82ab503fd6fbfdff71fd17e7f1ab37115a0665b3b

    - name: Build Linux binaries
      run: |
        export PATH="$HOME/.swiftly/bin:$PATH"

        # Create build directories
        mkdir -p build/linux/x86_64
        mkdir -p build/linux/aarch64

        # Try to build for Linux x86_64 with static Swift stdlib only
        # Remove full static linking due to cross-compilation issues with C dependencies
        swift build -c release --swift-sdk x86_64-swift-linux-musl
        cp .build/x86_64-swift-linux-musl/release/tuzuru build/linux/x86_64/${{ env.PRODUCT_NAME }}
        cp -r .build/x86_64-swift-linux-musl/release/tuzuru_TuzuruLib.resources build/linux/x86_64/

        # Clean build for next architecture
        rm -rf .build

        # Build for Linux aarch64 with static Swift stdlib only
        swift build -c release --swift-sdk aarch64-swift-linux-musl
        cp .build/aarch64-swift-linux-musl/release/tuzuru build/linux/aarch64/${{ env.PRODUCT_NAME }}
        cp -r .build/aarch64-swift-linux-musl/release/tuzuru_TuzuruLib.resources build/linux/aarch64/

        # Package Linux binaries
        cd build/linux
        tar -czf ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz -C x86_64 ${{ env.PRODUCT_NAME }} tuzuru_TuzuruLib.resources
        tar -czf ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-aarch64.tar.gz -C aarch64 ${{ env.PRODUCT_NAME }} tuzuru_TuzuruLib.resources

        # Generate checksums for Linux binaries
        shasum -a 256 *.tar.gz > ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-checksums.txt

    - name: Clean build directory before macOS build
      run: rm -rf .build

    - name: Build macOS binaries
      run: |
        # Create build directory
        mkdir -p build/macos/universal

        # Build universal binary for macOS
        swift build -c release --arch arm64 --arch x86_64

        # Copy binary and bundle
        cp .build/apple/Products/Release/${{ env.PRODUCT_NAME }} build/macos/universal/${{ env.PRODUCT_NAME }}
        chmod +x build/macos/universal/${{ env.PRODUCT_NAME }}

        # Copy bundle files from universal build
        cp -r .build/apple/Products/Release/tuzuru_TuzuruLib.bundle build/macos/universal/

        # Package macOS binary
        cd build/macos
        tar -czf ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz -C universal ${{ env.PRODUCT_NAME }} tuzuru_TuzuruLib.bundle

        # Generate checksums for macOS binary
        shasum -a 256 *.tar.gz > ${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-checksums.txt

    - name: Test Binaries
      run: |
        # Test macOS binary
        build/macos/universal/${{ env.PRODUCT_NAME }} --version || echo "Version command not available"
        build/macos/universal/${{ env.PRODUCT_NAME }} --help

        # Test Linux binaries (basic file check)
        chmod +x build/linux/x86_64/${{ env.PRODUCT_NAME }}
        chmod +x build/linux/aarch64/${{ env.PRODUCT_NAME }}
        file build/linux/x86_64/${{ env.PRODUCT_NAME }}
        file build/linux/aarch64/${{ env.PRODUCT_NAME }}

    - name: Update Homebrew Formula
      run: |
        SHA=$(shasum -a 256 build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz | cut -d ' ' -f 1)
        sed -i '' "s|url \".*\"|url \"https://github.com/ainame/Tuzuru/releases/download/${{ steps.version.outputs.version }}/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz\"|" Formula/tuzuru.rb
        sed -i '' "s|sha256 \".*\"|sha256 \"$SHA\"|" Formula/tuzuru.rb

    - name: Commit Formula Update
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Formula/tuzuru.rb

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No Formula changes to commit"
        else
          # Create a branch for Formula update
          BRANCH="update-formula-${{ steps.version.outputs.version }}"
          git checkout -b "$BRANCH"
          git commit -m "chore: update Formula for ${{ steps.version.outputs.version }}"
          git push origin "$BRANCH"

          # Create PR for Formula update
          gh pr create \
            --title "chore: update Formula for ${{ steps.version.outputs.version }}" \
            --body "Automated Formula update for release ${{ steps.version.outputs.version }}" \
            --base main \
            --head "$BRANCH"

          # Auto-merge the PR
          gh pr merge "$BRANCH" --squash --auto
        fi

    - name: Create Release and Upload All Assets
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Determine if prerelease
        PRERELEASE_FLAG=""
        if [[ "${{ steps.version.outputs.version }}" == *"alpha"* ]] || [[ "${{ steps.version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.version.outputs.version }}" == *"rc"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        fi

        # Create release with all assets (macOS + Linux)
        gh release create "${{ steps.version.outputs.version }}" \
          --title "Tuzuru ${{ steps.version.outputs.version }}" \
          --generate-notes \
          $PRERELEASE_FLAG \
          build/macos/universal/${{ env.PRODUCT_NAME }} \
          build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-universal.tar.gz \
          build/macos/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-macos-checksums.txt \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-x86_64.tar.gz \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-aarch64.tar.gz \
          build/linux/${{ env.PRODUCT_NAME }}-${{ steps.version.outputs.version }}-linux-checksums.txt

    - name: Setup Node for npm publish
      uses: actions/setup-node@v5
      with:
        node-version: '22'
        registry-url: 'https://registry.npmjs.org'

    - name: Publish npm package
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        # Ensure package.json version matches the tag (no 'v' prefix)
        # If already correct (updated by release.sh), this is a no-op.
        jq '.version = "${{ steps.version.outputs.version }}"' package.json > package.json.tmp && mv package.json.tmp package.json
        npm publish --access public
